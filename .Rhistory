# Analise descritiva para variaveis continuas
descriptive.quantitative <- function(df.cont.var, df.cate.var = NULL, ndec = 2) {
if (is.null(df.cate.var)) {
# Quantidade de variaveis continuas
nx <- ncol(df.cont.var)
# Nome das variaveis continuas
var.names <- names(df.cont.var)
# Matriz para salvar os resultados descritivos
R <- matrix(0, ncol = 9, nrow = nx)
colnames(R) <- c("Mean", "Standard Deviation", "Standard Error", "Median", "Quantile 25", "Quantile 75", "Minimum", "Maximum", "n")
# Calculo das quantidades de interesse
R[,1] <- apply(df.cont.var, 2, mean, na.rm = TRUE)
R[,2] <- apply(df.cont.var, 2, sd, na.rm = TRUE)
R[,3] <- apply(df.cont.var, 2, function(x)
out <- sd(x, na.rm = TRUE)/sqrt(length(na.omit(x))))
R[,4] <- apply(df.cont.var, 2, median, na.rm = TRUE)
R[,5] <- apply(df.cont.var, 2, quantile, probs = 0.25, na.rm = TRUE)
R[,6] <- apply(df.cont.var, 2, quantile, probs = 0.75, na.rm = TRUE)
R[,7] <- apply(df.cont.var, 2, min, na.rm = TRUE)
R[,8] <- apply(df.cont.var, 2, max, na.rm = TRUE)
R[,9] <- apply(df.cont.var, 2, function(x) out <- length(na.omit(x)))
# Arredondamento de ndec decimais
R <- round(R, ndec)
D <- data.frame(Variable = var.names, R)
# write.csv2(D, file = "descriptive_quantitative.csv")
} else { # Analise por grupo
# Quantidade de variaveis continuas e grupos
nx <- ncol(df.cont.var)
ng <- ncol(df.cate.var)
# Nome das variaveis continuas e grupos
group.names <- names(df.cate.var)
var.names <- names(df.cont.var)
for (k in 1:ng) {
# Selecionando a variavel categorica k
g <- df.cate.var[,k]
# Quantidade e nome dos niveis da variavel categorica k
nlg <- nlevels(g)
lg <- levels(g)
# Matriz para salvar os resultados descritivos
R <- matrix(0, ncol = 9, nrow = nx*nlg)
colnames(R) <- c("Mean", "Standard Deviation", "Standard Error", "Median", "Quantile 25", "Quantile 75", "Minimum", "Maximum", "n")
variable01 <- rep(var.names, each = nlg)
factor01 <- rep(group.names[k], nx*nlg)
group01 <- rep(lg, nx)
# Calculo das quantidades de interesse
R[,1] <- apply(df.cont.var, 2, function(x, g){out <- tapply(x, g, mean, na.rm = TRUE)}, g = g)
R[,2] <- apply(df.cont.var, 2, function(x, g){out <- tapply(x, g, sd, na.rm = TRUE)}, g = g)
R[,3] <- apply(df.cont.var, 2, function(x, g){out <- tapply(x, g, function(x) out <- sd(x, na.rm = TRUE)/sqrt(length(na.omit(x))))}, g = g)
R[,4] <- apply(df.cont.var, 2, function(x, g){out <- tapply(x, g, median, na.rm = TRUE)}, g = g)
R[,5] <- apply(df.cont.var, 2, function(x, g){out <- tapply(x, g, quantile, na.rm = TRUE, probs = 0.25)}, g = g)
R[,6] <- apply(df.cont.var, 2, function(x, g){out <- tapply(x, g, quantile, na.rm = TRUE, probs = 0.75)}, g = g)
R[,7] <- apply(df.cont.var, 2, function(x, g){out <- tapply(x, g, min, na.rm = TRUE)}, g = g)
R[,8] <- apply(df.cont.var, 2, function(x, g){out <- tapply(x, g, max, na.rm = TRUE)}, g = g)
R[,9] <- apply(df.cont.var, 2, function(x, g){nax <- attr(na.omit(x), "na.action"); nag <- attr(na.omit(g), "na.action")
na <- c(nax, nag); if(!is.null(nax) | !is.null(nag)) x <- x[-na] else x <- x
if(!is.null(nax) | !is.null(nag)) g <- g[-na] else g <- g; out <- tapply(x, g, length)}, g = g)
# Arredondamento de ndec decimais
R <- round(R, ndec)
DP <- data.frame(Variable = variable01, Factor = factor01, Group = group01, R)
if(k > 1) DP <- rbind(D,DP)
D <- DP
}
# write.csv2(D, file = "descriptive_quantitative_group.csv")
}
return(D)
}
# Analise descritiva para variaveis categoricas
descriptive.qualitative <- function(df1.cate.var, df2.cate.var = NULL, order = FALSE) {
if (is.null(df2.cate.var)) {
# Quantidade de variavei s categoricas
nh <- ncol(df1.cate.var)
# Nome das variaveis categoricas
var.names <- names(df1.cate.var)
for (i in 1:nh) {
# Definindo a variavel i como fator
h <- as.factor(df1.cate.var[,i])
# Quantidade e nome dos niveis da variavel i
nlh <- nlevels(h)
lh <- levels(h)
# Calculo das quantidades de interesse
factor01 <- rep(var.names[i], each = nlh)
tab <- table(h)
nfactor <- rep(sum(tab), nlh)
plev <- as.numeric(round(100*prop.table(tab),2))
DP <- data.frame(Factor = factor01, Group = lh, Frequency = as.numeric(tab), Percent = plev, n = nfactor)
if (i > 1) DP <- rbind(D, DP)
D <- DP
}
# write.csv2(D, file = "descriptive_qualitative.csv")
} else { # Analise por grupo
# Quantidade de variaveis categoricas na base principal e na base de grupo
nh <- ncol(df1.cate.var)
ng <- ncol(df2.cate.var)
# Nome das variaveis categoricas na base principal e na base de grupo
var.names <- names(df1.cate.var)
group.names <- names(df2.cate.var)
for (i in 1:nh) {
for (j in 1:ng) {
if(order) j <- i
# Definindo as variaveis i (base principal) e j (base de grupo) como fatores
h <- as.factor(df1.cate.var[,i])
g <- as.factor(df2.cate.var[,j])
# Quantidade e nome dos niveis de cada variavel
nlh <- nlevels(h)
nlg <- nlevels(g)
lh <- levels(h)
lg <- levels(g)
# Calculo das quantidades de interesse
factor01 <- rep(group.names[j], each = nlg*nlh)
factor02 <- rep(var.names[i], times = nlg*nlh)
group02 <- rep(lh, times = nlg)
group01 <- rep(lg, each = nlh)
tab <- table(df2.cate.var[,j], df1.cate.var[,i])
nfactor <- rep(rowSums(as.matrix(tab)), each = nlh)
plev <- round(as.numeric(t(100*prop.table(tab,1))),2)
DP <- data.frame(Factor01 = factor01, Group01 = group01, Factor02 = factor02, Group02 = group02, Frequency = as.vector(t(tab)), Percent = plev, n = nfactor)
if (max(i,j) > 1) DP <- rbind(D, DP)
D <- DP
if (order) break
}
}
# write.csv2(D, file = "descriptive_qualitative_group.csv")
}
return(D)
}
nt.mean.twogroups <-  function(X, G, alternative = "two.sided",
filename = "nt_mean_twogroups.csv", pair = FALSE,
ARRED =TRUE, lang = "pt") {
nx <- ncol(X)
ng <- ncol(G)
X.names <- names(X)
G.names <- names(G)
for (i in 1:ng) {
for (j in 1:nx) {
x <- X[,j]
g <- G[,i]
d <- data.frame(x, g)
if(!pair) d <- na.exclude(d)
x <- d$x
g <- droplevels(d$g)
nlg <- nlevels(g)
lg <- levels(g)
if (nlg == 2) {
ad <- tapply(x, g, function(x) r <- try(ad.test(x)$p.value, silent = TRUE))
p.ad <- ifelse(class(ad) != "try-error" & is.finite(ad), ad, 0)
if (all(p.ad > 0.05)) {
bt <- bartlett.test(x, g)
p.bt <- bt$p.value
if (p.bt > 0.05) {
p.t <- t.test(x[g == lg[2]], x[g == lg[1]], var.equal = TRUE, alternative = alternative, paired = pair)$p.value
} else {
p.t <- t.test(x[g == lg[2]], x[g == lg[1]], var.equal = FALSE, alternative = alternative, paired = pair)$p.value
}
if (ARRED==TRUE) p.value <-  round(p.t, 3) else  p.value <-  p.t
if(pair) {
if (lang == "pt") {
test <- "Teste t\n (Pareado)"
} else if (lang == "en") {
test <- "Paired t\n Test"
}
} else {
if (lang == "pt") {
test <- "Teste t"
} else if (lang == "en") {
test <- "t Test"
}
}
}
if (any(p.ad < 0.05)) {
g <- as.factor(g)
lv <- car::leveneTest(x,g)
p.lv <- lv$"Pr(>F)"[1]
if (p.lv > 0.05) {
p.w <- wilcox.test(x[g == lg[2]], x[g == lg[1]], alternative = alternative, paired = pair)$p.value
if (ARRED==TRUE) p.value <-  round(p.w, 3) else  p.value <- p.w
if(pair) {
if (lang == "pt") {
test <- "Teste de\n Mann-Whitney (Pareado)"
} else if (lang == "en") {
test <- "Paired\n Mann-Whitney Test"
}
} else {
if (lang == "pt") {
test <- "Teste de\n Mann-Whitney"
} else if (lang == "en") {
test <- "Mann-Whitney\n Test"
}
}
} else {
if (!pair) {
p.nt <- nparcomp::npar.t.test(x ~ g, data = d, method = "t.app", alternative = alternative, info=FALSE)$Analysis[, 6]
if (ARRED==TRUE) p.value <-  round(p.nt, 3) else p.value <-  p.nt
if (lang == "pt") {
test <- "Teste t\n Brunner-Munzel"
} else if (lang == "en") {
test <- "Brunner-Munzel\n t Test"
}
} else {
p.w <- wilcox.test(x[g == lg[2]], x[g == lg[1]], alternative = alternative, paired = pair)$p.value
if (ARRED==TRUE) p.value <-  round(p.w, 3) else  p.value <- p.w
if (lang == "pt") {
test <- "Teste de\n Mann-Whitney (Pareado)"
} else if (lang == "en") {
test <- "Paired\n Mann-Whitney Test"
}
}
}
}
dif.sign <- switch(alternative, "two.sided" = "!=", "greater" = ">", "less" = "<")
dif <- paste(lg[2], dif.sign, lg[1])
} else {
p.value <- NA
test <- NA
dif <- NA
}
#p.value <- p.adjust(p.value, method = "BH", n = 4)    #corrige o nivel de significancia
DP <- data.frame(Variable = X.names[j] , Factor = G.names[i], Hypothesis = dif, Test = test, p.value)
if (max(i,j) > 1)
DP <- rbind(D, DP)
D <- DP
}
}
# write.csv2(D, file = filename)
return(D)
}
## Quem é Júlia Martins?
* Minimal, you can focus on your content
* Responsive
* Disqus integration
* Syntax highlighting
* Optional post image
* Social icons
* Page for sharing projects
* Optional background image
* Simple navigation menu
* MathJax support
